package text

import "github.com/hajimehoshi/ebiten/v2"

func init() {
	for _, bitmap := range pkgBitmaps {
		bounds := bitmap.Bounds()
		if bounds.Dx() <= 0 || bounds.Dy() != 7 { panic(bounds) }
	}
}

func rawAlphaMaskToWhiteMask(width int, mask []byte) *ebiten.Image {
	buff := make([]byte, len(mask)*4)
	var buffIndex int
	for i := 0; i < len(mask); i++ {
		buff[buffIndex + 0] = 255*mask[i]
		buff[buffIndex + 1] = 255*mask[i]
		buff[buffIndex + 2] = 255*mask[i]
		buff[buffIndex + 3] = 255*mask[i]
		buffIndex += 4
	}
	
	height := len(mask)/width
	output := ebiten.NewImage(width, height)
	output.WritePixels(buff)
	return output
}

const KeyO   = '\x01'
const KeyI   = '\x02'
const KeyJ   = '\x03'
const KeyP   = '\x04'
const KeyL   = '\x05'
const KeyA   = '\x06'
const KeyD   = '\x07'
const KeyTAB = '\x09'

const KeyMsgI = '\x10'

const GpBtBottom  = '\uE026'
const GpBtTop     = '\uE027'
const GpBtRight   = '\uE028'
const GpBtLeft    = '\uE029'
const GpShoulderL = '\uE02A'
const GpShoulderR = '\uE02B'
const GpShoulders = '\uE02C'
const GpTriggL    = '\uE02D'
const GpTriggR    = '\uE02E'
const GpTriggers  = '\uE02F'

const TriangleLeft  = '\u2B9C'
const TriangleLeftWithPad  = '\u2B9D'
const TriangleRight = '\u2B9E'
const TriangleRightWithPad = '\u2B9F'
const Padder = '\u200A' // aka hair space
const HalfSpace = '\u2009' // aka thin space

var pkgBitmaps = map[rune]*ebiten.Image{
	// --- special hacks ----
	GpBtBottom: rawAlphaMaskToWhiteMask(9, []byte{
		0, 0, 0, 0, 1, 0, 0, 0, 0,
		0, 0, 0, 1, 0, 1, 0, 0, 0,
		0, 1, 0, 0, 1, 0, 0, 1, 0,
		1, 0, 1, 0, 0, 0, 1, 0, 1,
		0, 1, 0, 0, 1, 0, 0, 1, 0,
		0, 0, 0, 1, 1, 1, 0, 0, 0,
		0, 0, 0, 0, 1, 0, 0, 0, 0,
	}),
	GpBtRight: rawAlphaMaskToWhiteMask(9, []byte{
		0, 0, 0, 0, 1, 0, 0, 0, 0,
		0, 0, 0, 1, 0, 1, 0, 0, 0,
		0, 1, 0, 0, 1, 0, 0, 1, 0,
		1, 0, 1, 0, 0, 0, 1, 1, 1,
		0, 1, 0, 0, 1, 0, 0, 1, 0,
		0, 0, 0, 1, 0, 1, 0, 0, 0,
		0, 0, 0, 0, 1, 0, 0, 0, 0,
	}),
	GpBtLeft: rawAlphaMaskToWhiteMask(9, []byte{
		0, 0, 0, 0, 1, 0, 0, 0, 0,
		0, 0, 0, 1, 0, 1, 0, 0, 0,
		0, 1, 0, 0, 1, 0, 0, 1, 0,
		1, 1, 1, 0, 0, 0, 1, 0, 1,
		0, 1, 0, 0, 1, 0, 0, 1, 0,
		0, 0, 0, 1, 0, 1, 0, 0, 0,
		0, 0, 0, 0, 1, 0, 0, 0, 0,
	}),
	GpBtTop: rawAlphaMaskToWhiteMask(9, []byte{
		0, 0, 0, 0, 1, 0, 0, 0, 0,
		0, 0, 0, 1, 1, 1, 0, 0, 0,
		0, 1, 0, 0, 1, 0, 0, 1, 0,
		1, 0, 1, 0, 0, 0, 1, 0, 1,
		0, 1, 0, 0, 1, 0, 0, 1, 0,
		0, 0, 0, 1, 0, 1, 0, 0, 0,
		0, 0, 0, 0, 1, 0, 0, 0, 0,
	}),
	GpShoulderL: rawAlphaMaskToWhiteMask(13, []byte{
		0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0,
		1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,
		1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1,
		0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,
	}),
	GpShoulderR: rawAlphaMaskToWhiteMask(13, []byte{
		0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0,
		1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,
		1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0,
		1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0,
	}),
	GpShoulders: rawAlphaMaskToWhiteMask(13, []byte{
		0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0,
		1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,
		1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0,
	}),
	GpTriggL: rawAlphaMaskToWhiteMask(13, []byte{
		0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1,
		1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
		1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,
		1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	}),
	GpTriggR: rawAlphaMaskToWhiteMask(13, []byte{
		0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0,
		1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
		1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,
		1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	}),
	GpTriggers: rawAlphaMaskToWhiteMask(13, []byte{
		0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
		1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,
		1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	}),
	KeyTAB: rawAlphaMaskToWhiteMask(13, []byte{
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1,
		1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1,
		1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1,
		1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1,
		1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	}),
	KeyO: rawAlphaMaskToWhiteMask(6, []byte{
		1, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 1, 1,
		1, 0, 1, 1, 0, 1,
		1, 0, 1, 1, 0, 1,
		1, 0, 1, 1, 0, 1,
		1, 1, 0, 0, 1, 1,
		1, 1, 1, 1, 1, 1,
	}),
	KeyI: rawAlphaMaskToWhiteMask(5, []byte{
		1, 1, 1, 1, 1,
		1, 0, 0, 0, 1,
		1, 1, 0, 1, 1,
		1, 1, 0, 1, 1,
		1, 1, 0, 1, 1,
		1, 0, 0, 0, 1,
		1, 1, 1, 1, 1,
	}),
	KeyP: rawAlphaMaskToWhiteMask(5, []byte{
		1, 1, 1, 1, 1,
		1, 0, 0, 0, 1,
		1, 0, 1, 0, 1,
		1, 0, 0, 0, 1,
		1, 0, 1, 1, 1,
		1, 0, 1, 1, 1,
		1, 1, 1, 1, 1,
	}),
	KeyL: rawAlphaMaskToWhiteMask(5, []byte{
		1, 1, 1, 1, 1,
		1, 0, 1, 1, 1,
		1, 0, 1, 1, 1,
		1, 0, 1, 1, 1,
		1, 0, 1, 1, 1,
		1, 0, 0, 0, 1,
		1, 1, 1, 1, 1,
	}),
	KeyJ: rawAlphaMaskToWhiteMask(6, []byte{
		1, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 0, 1,
		1, 1, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1,
		1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1,
	}),
	KeyD: rawAlphaMaskToWhiteMask(6, []byte{
		1, 1, 1, 1, 1, 1,
		1, 0, 0, 0, 1, 1,
		1, 0, 1, 1, 0, 1,
		1, 0, 1, 1, 0, 1,
		1, 0, 1, 1, 0, 1,
		1, 0, 0, 0, 1, 1,
		1, 1, 1, 1, 1, 1,
	}),
	KeyA: rawAlphaMaskToWhiteMask(5, []byte{
		1, 1, 1, 1, 1,
		1, 0, 0, 0, 1,
		1, 0, 1, 0, 1,
		1, 0, 0, 0, 1,
		1, 0, 1, 0, 1,
		1, 0, 1, 0, 1,
		1, 1, 1, 1, 1,
	}),
	KeyMsgI: rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		0, 1, 0,
		0, 1, 0,
		0, 1, 0,
		1, 1, 1,
		0, 0, 0,
	}),

	// --- main alphabet ---
	'A': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		1, 0, 1,
		1, 1, 1,
		1, 0, 1,
		1, 0, 1,
		0, 0, 0,
	}),
	'B': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 0,
		1, 0, 1,
		1, 1, 0,
		1, 0, 1,
		1, 1, 0,
		0, 0, 0,
	}),
	'C': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		1, 0, 0,
		1, 0, 0,
		1, 0, 0,
		1, 1, 1,
		0, 0, 0,
	}),
	'D': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 0,
		1, 0, 1,
		1, 0, 1,
		1, 0, 1,
		1, 1, 0,
		0, 0, 0,
	}),
	'E': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		1, 0, 0,
		1, 1, 0,
		1, 0, 0,
		1, 1, 1,
		0, 0, 0,
	}),
	'F': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		1, 0, 0,
		1, 1, 1,
		1, 0, 0,
		1, 0, 0,
		0, 0, 0,
	}),
	'G': rawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		1, 1, 1, 1,
		1, 0, 0, 0,
		1, 0, 1, 1,
		1, 0, 0, 1,
		1, 1, 1, 1,
		0, 0, 0, 0,
	}),
	'H': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 0, 1,
		1, 0, 1,
		1, 1, 1,
		1, 0, 1,
		1, 0, 1,
		0, 0, 0,
	}),
	'I': rawAlphaMaskToWhiteMask(1, []byte{
		0,
		1,
		1,
		1,
		1,
		1,
		0,
	}),
	'J': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		0, 0, 1,
		0, 0, 1,
		0, 0, 1,
		1, 0, 1,
		0, 1, 0,
		0, 0, 0,
	}),
	'K': rawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		1, 0, 0, 1,
		1, 0, 1, 0,
		1, 1, 0, 0,
		1, 0, 1, 0,
		1, 0, 0, 1,
		0, 0, 0, 0,
	}),
	'L': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 0, 0,
		1, 0, 0,
		1, 0, 0,
		1, 0, 0,
		1, 1, 1,
		0, 0, 0,
	}),
	'M': rawAlphaMaskToWhiteMask(5, []byte{
		0, 0, 0, 0, 0,
		1, 1, 0, 1, 1,
		1, 1, 0, 1, 1,
		1, 0, 1, 0, 1,
		1, 0, 1, 0, 1,
		1, 0, 0, 0, 1,
		0, 0, 0, 0, 0,
	}),
	'N': rawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		1, 0, 0, 1,
		1, 1, 0, 1,
		1, 1, 1, 1,
		1, 0, 1, 1,
		1, 0, 0, 1,
		0, 0, 0, 0,
	}),
	'O': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		1, 0, 1,
		1, 0, 1,
		1, 0, 1,
		1, 1, 1,
		0, 0, 0,
	}),
	'P': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		1, 0, 1,
		1, 1, 1,
		1, 0, 0,
		1, 0, 0,
		0, 0, 0,
	}),
	'Q': rawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		1, 1, 1, 1,
		1, 0, 0, 1,
		1, 0, 0, 1,
		1, 0, 1, 1,
		1, 1, 1, 1,
		0, 0, 1, 0,
	}),
	'R': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		1, 0, 1,
		1, 1, 0,
		1, 0, 1,
		1, 0, 1,
		0, 0, 0,
	}),
	'S': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		1, 0, 0,
		1, 1, 1,
		0, 0, 1,
		1, 1, 1,
		0, 0, 0,
	}),
	'T': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		0, 1, 0,
		0, 1, 0,
		0, 1, 0,
		0, 1, 0,
		0, 0, 0,
	}),
	'U': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 0, 1,
		1, 0, 1,
		1, 0, 1,
		1, 0, 1,
		1, 1, 1,
		0, 0, 0,
	}),
	'V': rawAlphaMaskToWhiteMask(5, []byte{
		0, 0, 0, 0, 0,
		1, 0, 0, 0, 1,
		1, 0, 0, 0, 1,
		0, 1, 0, 1, 0,
		0, 1, 0, 1, 0,
		0, 0, 1, 0, 0,
		0, 0, 0, 0, 0,
	}),
	'W': rawAlphaMaskToWhiteMask(5, []byte{
		0, 0, 0, 0, 0,
		1, 0, 0, 0, 1,
		1, 0, 0, 0, 1,
		1, 0, 1, 0, 1,
		0, 1, 0, 1, 0,
		0, 1, 0, 1, 0,
		0, 0, 0, 0, 0,
	}),
	'X': rawAlphaMaskToWhiteMask(5, []byte{
		0, 0, 0, 0, 0,
		1, 0, 0, 0, 1,
		0, 1, 0, 1, 0,
		0, 0, 1, 0, 0,
		0, 1, 0, 1, 0,
		1, 0, 0, 0, 1,
		0, 0, 0, 0, 0,
	}),
	'Y': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 0, 1,
		1, 0, 1,
		0, 1, 0,
		0, 1, 0,
		0, 1, 0,
		0, 0, 0,
	}),
	'Z': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		0, 0, 1,
		0, 1, 0,
		1, 0, 0,
		1, 1, 1,
		0, 0, 0,
	}),

	// ---- numbers ----
	'0': rawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		0, 1, 1, 0,
		1, 0, 0, 1, 
		1, 0, 0, 1, 
		1, 0, 0, 1, 
		0, 1, 1, 0, 
		0, 0, 0, 0,
	}),
	'1': rawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		0, 0, 1, 0,
		0, 1, 1, 0,
		0, 0, 1, 0,
		0, 0, 1, 0,
		0, 1, 1, 1,
		0, 0, 0, 0, 
	}),
	'2': rawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		0, 1, 1, 0,
		1, 0, 0, 1,
		0, 0, 1, 0,
		0, 1, 0, 0,
		1, 1, 1, 1, 
		0, 0, 0, 0,
	}),
	'3': rawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		1, 1, 1, 0,
		0, 0, 0, 1,
		0, 1, 1, 0,
		0, 0, 0, 1,
		1, 1, 1, 0, 
		0, 0, 0, 0,
	}),
	'4': rawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		1, 0, 0, 1,
		1, 0, 0, 1,
		1, 1, 1, 1,
		0, 0, 0, 1,
		0, 0, 0, 1, 
		0, 0, 0, 0,
	}),
	'5': rawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		1, 1, 1, 1,
		1, 0, 0, 0,
		1, 1, 1, 0,
		0, 0, 0, 1,
		1, 1, 1, 0,
		0, 0, 0, 0,
	}),
	'6': rawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		1, 1, 1, 1,
		1, 0, 0, 0,
		1, 1, 1, 1,
		1, 0, 0, 1,
		1, 1, 1, 1,
		0, 0, 0, 0,
	}),
	'7': rawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		1, 1, 1, 1,
		0, 0, 0, 1,
		0, 0, 1, 0,
		0, 1, 0, 0,
		0, 1, 0, 0,
		0, 0, 0, 0,
	}),
	'8': rawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		0, 1, 1, 0,
		1, 0, 0, 1,
		0, 1, 1, 0,
		1, 0, 0, 1,
		0, 1, 1, 0,
		0, 0, 0, 0,
	}),
	'9': rawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		1, 1, 1, 1,
		1, 0, 0, 1,
		1, 1, 1, 1,
		0, 0, 0, 1,
		0, 0, 0, 1,
		0, 0, 0, 0,
	}),

	// ---- symbols and punctuation ----
	// Note: space is special and only shifts the
	//       position 4 pixels forwards.
	'.': rawAlphaMaskToWhiteMask(1, []byte{
		0,
		0,
		0,
		0,
		0,
		1,
		0,
	}),
	',': rawAlphaMaskToWhiteMask(1, []byte{
		0,
		0,
		0,
		0,
		0,
		1,
		1,
	}),
	':': rawAlphaMaskToWhiteMask(1, []byte{
		0,
		0,
		1,
		0,
		1,
		0,
		0,
	}),
	';': rawAlphaMaskToWhiteMask(2, []byte{
		0, 0,
		0, 0,
		0, 1,
		0, 0,
		0, 1,
		0, 1,
		1, 0,
	}),
	'!': rawAlphaMaskToWhiteMask(1, []byte{
		0,
		1,
		1,
		1,
		0,
		1,
		0,
	}),
	'?': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 0,
		0, 0, 1,
		0, 1, 0,
		0, 0, 0,
		0, 1, 0,
		0, 0, 0,
	}),
	'\'': rawAlphaMaskToWhiteMask(1, []byte{
		0,
		1,
		1,
		0,
		0,
		0,
		0,
	}),
	'(': rawAlphaMaskToWhiteMask(2, []byte{
		0, 1,
		1, 0,
		1, 0,
		1, 0,
		1, 0,
		1, 0,
		0, 1,
	}),
	')': rawAlphaMaskToWhiteMask(2, []byte{
		1, 0,
		0, 1,
		0, 1,
		0, 1,
		0, 1,
		0, 1,
		1, 0,
	}),
	'[': rawAlphaMaskToWhiteMask(2, []byte{
		1, 1,
		1, 0,
		1, 0,
		1, 0,
		1, 0,
		1, 0,
		1, 1,
	}),
	']': rawAlphaMaskToWhiteMask(2, []byte{
		1, 1,
		0, 1,
		0, 1,
		0, 1,
		0, 1,
		0, 1,
		1, 1,
	}),
	'"': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 0, 1,
		1, 0, 1,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
	}),
	'_': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		1, 1, 1,
		0, 0, 0,
	}),
	'-': rawAlphaMaskToWhiteMask(2, []byte{
		0, 0,
		0, 0,
		0, 0,
		1, 1,
		0, 0,
		0, 0,
		0, 0,
	}),
	'+': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		0, 0, 0,
		0, 1, 0,
		1, 1, 1,
		0, 1, 0,
		0, 0, 0,
		0, 0, 0,
	}),
	'/': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		0, 0, 1,
		0, 0, 1,
		0, 1, 0,
		1, 0, 0,
		1, 0, 0,
		0, 0, 0,
	}),
	'#': rawAlphaMaskToWhiteMask(5, []byte{
		0, 0, 0, 0, 0,
		0, 1, 0, 1, 0,
		1, 1, 1, 1, 1, 
		0, 1, 0, 1, 0, 
		1, 1, 1, 1, 1, 
		0, 1, 0, 1, 0,
		0, 0, 0, 0, 0,
	}),
	'º': rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		0, 1, 0,
		1, 0, 1,
		0, 1, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
	}),
	TriangleLeft: rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		0, 0, 1,
		0, 1, 1,
		1, 1, 1,
		0, 1, 1,
		0, 0, 1,
		0, 0, 0,
	}),
	TriangleRight: rawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 0, 0,
		1, 1, 0,
		1, 1, 1,
		1, 1, 0,
		1, 0, 0,
		0, 0, 0,
	}),
	TriangleLeftWithPad: rawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0, 
		0, 0, 1, 0, 
		0, 1, 1, 0, 
		1, 1, 1, 0, 
		0, 1, 1, 0, 
		0, 0, 1, 0, 
		0, 0, 0, 0, 
	}),
	TriangleRightWithPad: rawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		0, 1, 0, 0,
		0, 1, 1, 0,
		0, 1, 1, 1,
		0, 1, 1, 0,
		0, 1, 0, 0,
		0, 0, 0, 0,
	}),
	Padder: rawAlphaMaskToWhiteMask(1, []byte{
		0,
		0,
		0,
		0,
		0,
		0,
		0,
	}),
	HalfSpace: rawAlphaMaskToWhiteMask(2, []byte{
		0, 0, 
		0, 0, 
		0, 0, 
		0, 0, 
		0, 0, 
		0, 0, 
		0, 0, 
	}),
}
